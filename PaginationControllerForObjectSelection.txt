public class PaginationController {
    /*----------------------------------------------------------        FOR OBJECTS           ---------------------------------------------*/
    //It will return the KeySet of all the present objects in the org
    public Map<String,Schema.SObjectType> allObjectsMap{get;set;}
    // Now create a list which will hold the only objects
    public List<String> objList{get;set;}
    public String selectedObject{get;set;}
    //Created a selectoption for the picklist of objects
    public List<SelectOption> objects{get;set;}
    
    
    /* --------------------------------------------------               FOR FIELDS        ----------------------------------------------------*/
    
    
    //AllFeild is a list which will contain the all the fields
    public List<String> allFields{get;set;}
    //A map which will have the fields 
    public Map <String, Schema.SObjectField> fieldMap{get;set;} //We can use FieldMap to just extract all the fields for the selected object and also to get the label of the field fromt the api name (i.e FieldMap.get(api__name).getDdescribe().getLabel()
    //Now create select Option to pass that on the VF page
    
    // Created Two select Option fields which obtains the order or the added or removed fields in the picklist
    public List<SelectOption> selectedFieldsInOptions{get;set;}
    public List<SelectOption> notSelectedFieldsInOptions{get;set;}
    
    //These two lists are declared  because at the same time we have to perform two operations(i.e ADD & REMOVE) on the same list for multiple fields  so for the easyness we can add or remove list of selected fields
    public List<String> selectedFields{get;set;}
    public List<String> notSelectedFields{get;set;}
    
    //These two list's are for the items or fields which are to be selected from page to be add or remove 
    public List<String> fieldsToBeRemoved{get;set;}
    public List<String> fieldsToBeAdd{get;set;}
    
    //Now create contructor to initiate this
    public PaginationController(){
        
        objects = new List<SelectOption>();
        objList = new List<String>();
        allObjectsMap = Schema.getGlobalDescribe(); //Fetching the Map of Objects with their description
        objList.addAll(allObjectsMap.keySet());     // Fecthing the KeySet from Map(i.e Objects) and adding them to the list
        objList.sort();
        //Now create a picklist or select list to select the objects from the list 
        // Map.get(API__NAME).getDescribe().getLabel 
        objects.add(new SelectOption('None','-None-')); // By default add None at the top level        
        for(String objName : objList){
            if(objName.endsWith('__c') || (objName == 'Account' || objName == 'Asset' || objName == 'Campaign' || objName == 'Case' || objName == 'Contact' || objName == 'Contract' || objName == 'Idea' || objName == 'Lead' ||objName == 'Opportunity' || objName == 'Order' || objName == 'Solution' || objName == 'User')){
                SelectOption obj = new SelectOption(objName,allObjectsMap.get(objName).getDescribe().getLabel());//first ObjLabel is for the value of object andn another is for the Label name
                objects.add(obj);
            }
            
        }
        
        /*---------------------------------------------FOR FIELD INITIALISATION---------------------------------------------------*/
        
        allFields = new List<String>();
        selectedFieldsInOptions = new List<SelectOption>();
        notSelectedFieldsInOptions = new List<SelectOption>();
        selectedFields = new List<String>();
        notSelectedFields = new List<String>();
        fieldsToBeAdd = new List<String>();
        fieldsToBeRemoved = new List<String>();
        
    }
    
    //Create a Method which will show all the fields of selected object dynamically  
    public void details(){
        fieldMap = allObjectsMap.get(selectedObject).getDescribe().fields.getMap();
        System.debug('obj1' + selectedObject);
        allFields.addAll(fieldMap.keySet());
        allFields.sort();
        notSelectedFields.addAll(allFields);
        display();
    } 
    
    
    /*================================DYNAMIC DISPLAY METHOD(It can Handle both cases for Adding & Deletion)=========================================*/
    public void display(){
        objects.clear();
        selectedFieldsInOptions.clear();
        notselectedFieldsInOptions.clear();
        for(String fieldApi : notSelectedFields){
            String fieldLabel = fieldMap.get(fieldApi).getDescribe().getLabel();
            notselectedFieldsInOptions.add(new SelectOption(fieldApi,fieldLabel));//to fetch the field label 
        }
        for(String fieldApi : selectedFields){
            String fieldLabel = fieldMap.get(fieldApi).getDescribe().getLabel();
            selectedFieldsInOptions.add(new SelectOption(fieldApi,fieldLabel));
        }
    }
    
    /*===============================================METHODS FOR THE ADD & REMOVE BUTTON ============================================================*/ 
    
    public void addFields(){
        // Remove all the selected fields(Selected by user as a list) 
        for(String addingfeilds : fieldsToBeAdd){  
            notSelectedFields.remove(notSelectedFields.indexOf(addingfeilds));
        }
        selectedFields.addAll(fieldsToBeAdd);//Add those fields to the right picklist
        display();
    }
    
    public void removeFields(){
        notSelectedFields.addAll(fieldsToBeRemoved);//All the fields the to the notSelectedFields set to again add to the default feild side 
		//After adding fields the default fields side now remove them the set which is selectedFields set. 
        for(String s : fieldsToBeRemoved){
            selectedFields.remove(selectedFields.indexOf(s));
        }     
        display();     
    } 
    
    /*=============================================================================================================================================*/   
    
    //Resetting the current Page 
    public PageReference reset() {
        PageReference newpage = new PageReference(System.currentPageReference().getURL());
        newpage.setRedirect(true);
        return newpage;
    }
    
}